import os
import numpy as np
from PIL import Image, ImageFile, ImageOps
ImageFile.LOAD_TRUNCATED_IMAGES = True
import torch
import faiss
import clip
from tqdm import tqdm #‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÅ‡∏ñ‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤

VAL_PATH = r"data/val"       
TRAIN_PATH = r"data/train"  

EMB_FILE = "clip_embeddings.npy"
FN_FILE = "clip_filenames.npy"
INDEX_FILE = "clip_image_index.faiss"


K = 100 # üëà ‡∏ß‡∏±‡∏î‡∏ú‡∏• 100 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å 

device = "cuda" if torch.cuda.is_available() else "cpu"
model, preprocess = clip.load("ViT-B/32", device=device)
model.eval()

# ‡πÇ‡∏´‡∏•‡∏î Index ‡πÅ‡∏•‡∏∞ Filenames
try:
    index = faiss.read_index(INDEX_FILE)
    filenames = np.load(FN_FILE)
    print(f"‡πÇ‡∏´‡∏•‡∏î index ‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏°‡∏µ {index.ntotal} ‡∏£‡∏π‡∏õ)")
except Exception as e:
    print(f" ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏î‡∏±‡∏ä‡∏ô‡∏µ ({e})")
    exit()

# - Helper 
def load_rgb(image_source) -> Image.Image:
    try:
        with Image.open(image_source) as im:
            im = ImageOps.exif_transpose(im)
            return im.convert("RGB")
    except Exception:
        return None

def get_embedding(image: Image.Image) -> np.ndarray:
    if image is None: return None
    image_input = preprocess(image).unsqueeze(0).to(device)
    with torch.no_grad():
        image_features = model.encode_image(image_input)
    return image_features.squeeze(0).cpu().numpy().astype("float32")

# ======== 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ï‡∏±‡∏ß‡πÅ‡∏¢‡∏Å‡πÅ‡∏¢‡∏∞ "‡∏Ñ‡∏•‡∏≤‡∏™" (‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÄ‡∏≠‡∏á) ========

def get_class_from_path(path: str) -> str:
    try:
        # ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á .../val/class_A/file.jpg
        # os.path.dirname(path) = .../val/class_A
        # os.path.basename(...) =class_A
        class_name = os.path.basename(os.path.dirname(path))
        return class_name
    except Exception:
        return "unknown" 

print(f"‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°")
print(f"--- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏• (Mean Precision@{K}) ---")

# ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå

all_precision_scores = []
query_files = []

# ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô VAL_PATH
for root, _, files in os.walk(VAL_PATH):
    for fname in files:
        if fname.lower().endswith((".jpg", ".jpeg", ".png")):
            query_files.append(os.path.join(root, fname))

if not query_files:
    print(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏î‡πÜ ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå '{VAL_PATH}'")
    exit()

print(f"‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö) ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(query_files)} ‡∏£‡∏π‡∏õ")

# ‡πÉ‡∏ä‡πâ tqdm ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ñ‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
for query_path in tqdm(query_files, desc="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•"):
    
    # ‡∏´‡∏≤ "‡πÄ‡∏â‡∏•‡∏¢" ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ
    expected_class = get_class_from_path(query_path)
    if expected_class == "unknown":
        print(f"‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå:‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏Ñ‡∏•‡∏≤‡∏™‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å {query_path}")
        continue

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Embedding ‡∏Ç‡∏≠‡∏á ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    query_img = load_rgb(query_path)
    if query_img is None:
        print(f"‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå:‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ {query_path}")
        continue
        
    q_emb = get_embedding(query_img).reshape(1, -1)
    faiss.normalize_L2(q_emb) # Normalize ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cosine Sim

    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ 100 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
    D, I = index.search(q_emb, K + 1)
    
    # 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
    correct_count = 0
    result_indices = I[0] # index‡∏Ç‡∏≠‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå 100 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö

    for i in result_indices:
        result_path = filenames[i]
        result_class = get_class_from_path(result_path)
        
        # ‡∏Å‡∏£‡∏≠‡∏á‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏£‡∏π‡∏õ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô train 
        if result_path == query_path:
            continue
            
        # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏•‡∏≤‡∏™‡∏Ç‡∏≠‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏•‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á = ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        if result_class == expected_class:
            correct_count += 1
            
    # 5. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Precision ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏ô‡∏µ‡πâ
    p_at_k = correct_count / K
    all_precision_scores.append(p_at_k)

# ======== 4. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏• ========

if not all_precision_scores:
    print("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏´‡∏≤‡∏Ñ‡∏•‡∏≤‡∏™‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠?)")
else:
    mean_precision_at_k = np.mean(all_precision_scores)
    
    print("\n‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô Clip")
    print(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {len(all_precision_scores)}")
    print(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤:   {K}")
    print(f"Mean Precision: {mean_precision_at_k * 100:.2f} %")
    print(f"‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ô {K} ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏°‡∏≤‡πÉ‡∏´‡πâ ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á {mean_precision_at_k * 100:.2f} %")